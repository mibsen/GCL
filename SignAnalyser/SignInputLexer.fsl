{
module SignInputLexer
}

let char          = ['a'-'z' 'A'-'Z']
let sign          = "-" | "+" | "0"
let digit         = ['0'-'9']
let whitespace    = [' ' '\t']
let newline       = "\n\r" | '\n' | '\r'
let var           = char(char|digit)*

rule tokenize = parse
| whitespace    { tokenize lexbuf }
| newline       { NEWLINE }
| sign          { let sign = LexBuffer<_>.LexemeString lexbuf in SIGN(sign) }
| var           { let str = LexBuffer<_>.LexemeString lexbuf in VAR(str) }
| "="			{ ASSIGN }
| "{"           { LCBRAK }
| "}"           { RCBRAK }
| ","           { COMMA }
| eof           { EOF }
| _ { raise (Exception (sprintf "SyntaxError: Unexpected char: '%s' Line: %d Column: %d" (LexBuffer<_>.LexemeString lexbuf) (lexbuf.StartPos.Line+1) lexbuf.StartPos.Column)) }