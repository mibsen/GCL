%{
open GCLAST
%}

%token <string> STRING
%token <float> NUM
%token TIMES DIV PLUS MINUS POW LPAR RPAR ASSIGN EOF
%token LBRAK RBRAK SKIP IF FI DO OD THEN COND SEMI
%token AND OR SAND SOR NOT EQ GE LE GT LT NOTEQ 
%token TRUE FALSE

// Specify precedence and associativity of operators
// Precedence is given by the order (from low to high)
%left PLUS MINUS
%left TIMES DIV
%right POW

%left OR SOR
%left AND SAND
%nonassoc NOT

%right SEQ SEMI
%left COND

// start
%start start

%type <C> start
%type <C> command


%%

start: command EOF                        { $1 }

command:
    |x ASSIGN a                     { Assign($1, $3) }
    |x LBRAK a RBRAK ASSIGN a      { ArrayAssign($1, $3, $6) }
    |SKIP                           { Skip }
    |command SEMI command                       { Sequential($1, $3) }
    |IF gc FI                       { If($2) }
    |DO gc OD                       { Do($2) }

gc:
    |b THEN command                       { Choice($1, $3) }
    |gc COND gc                     { Conditional($1, $3) }       

a:
    |NUM                            { N($1) }
    |x                              { X($1) }
    |x LBRAK a RBRAK               { ArrayAccess($1, $3) }
    |a PLUS a                       { Plus($1, $3) }
    |a MINUS a                      { Minus($1, $3) }
    |a TIMES a                      { Multiply($1, $3) }
    |a DIV a                        { Divide($1, $3) }
    |MINUS a                        { UMinus($2) }
    |a POW a                        { Pow($1, $3) }
    |LPAR a RPAR                    { $2 }

x:  STRING                         { $1 }

b:
    |TRUE                           { True }
    |FALSE                          { False }
    |b OR b                         { Or($1, $3) }
    |b AND b                        { And($1, $3) }
    |b SAND b                       { SAnd($1, $3) }
    |b SOR b                        { SOr($1, $3) }
    |NOT b                          { Not($2) }
    |a EQ a                         { Eq($1, $3) }
    |a NOTEQ a                      { NotEq($1, $3) }
    |a GT a                         { Gt($1, $3) }
    |a GE a                         { Ge($1, $3) }
    |a LT a                         { Lt($1, $3) }
    |a LE a                         { Le($1, $3) }
    |LPAR b RPAR                    { $2 }
%%