// Implementation file for parser generated by fsyacc
module SecurityInputParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "SecurityInputParser.fsp"

open SecurityInput

# 10 "SecurityInputParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | ASSIGN
  | COMMA
  | EOF
  | SEMI
  | FLOW
  | SIGN of (string)
  | VAR of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_ASSIGN
    | TOKEN_COMMA
    | TOKEN_EOF
    | TOKEN_SEMI
    | TOKEN_FLOW
    | TOKEN_SIGN
    | TOKEN_VAR
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_input
    | NONTERM_lattice
    | NONTERM_ordering
    | NONTERM_classification
    | NONTERM_x

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | ASSIGN  -> 0 
  | COMMA  -> 1 
  | EOF  -> 2 
  | SEMI  -> 3 
  | FLOW  -> 4 
  | SIGN _ -> 5 
  | VAR _ -> 6 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_ASSIGN 
  | 1 -> TOKEN_COMMA 
  | 2 -> TOKEN_EOF 
  | 3 -> TOKEN_SEMI 
  | 4 -> TOKEN_FLOW 
  | 5 -> TOKEN_SIGN 
  | 6 -> TOKEN_VAR 
  | 9 -> TOKEN_end_of_input
  | 7 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_input 
    | 3 -> NONTERM_lattice 
    | 4 -> NONTERM_lattice 
    | 5 -> NONTERM_ordering 
    | 6 -> NONTERM_ordering 
    | 7 -> NONTERM_classification 
    | 8 -> NONTERM_classification 
    | 9 -> NONTERM_x 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 9 
let _fsyacc_tagOfErrorTerminal = 7

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | ASSIGN  -> "ASSIGN" 
  | COMMA  -> "COMMA" 
  | EOF  -> "EOF" 
  | SEMI  -> "SEMI" 
  | FLOW  -> "FLOW" 
  | SIGN _ -> "SIGN" 
  | VAR _ -> "VAR" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | ASSIGN  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | FLOW  -> (null : System.Object) 
  | SIGN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 2us; 65535us; 0us; 4us; 8us; 7us; 3us; 65535us; 0us; 9us; 8us; 9us; 12us; 13us; 2us; 65535us; 5us; 6us; 15us; 14us; 6us; 65535us; 0us; 10us; 5us; 16us; 8us; 10us; 12us; 11us; 15us; 16us; 17us; 18us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 8us; 12us; 15us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 2us; 2us; 3us; 1us; 2us; 2us; 2us; 7us; 2us; 3us; 3us; 1us; 3us; 1us; 4us; 2us; 5us; 6us; 3us; 5us; 6us; 6us; 2us; 5us; 6us; 1us; 5us; 2us; 7us; 7us; 1us; 7us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 9us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 11us; 13us; 16us; 19us; 21us; 23us; 26us; 30us; 33us; 35us; 38us; 40us; 42us; 44us; 46us; |]
let _fsyacc_action_rows = 20
let _fsyacc_actionTableElements = [|1us; 32768us; 6us; 19us; 0us; 49152us; 1us; 32768us; 2us; 3us; 0us; 16385us; 2us; 32768us; 1us; 8us; 3us; 5us; 1us; 32768us; 6us; 19us; 1us; 16386us; 1us; 15us; 0us; 16387us; 1us; 32768us; 6us; 19us; 0us; 16388us; 1us; 32768us; 4us; 12us; 1us; 16390us; 4us; 12us; 1us; 32768us; 6us; 19us; 0us; 16389us; 0us; 16391us; 1us; 32768us; 6us; 19us; 1us; 32768us; 0us; 17us; 1us; 32768us; 6us; 19us; 0us; 16392us; 0us; 16393us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 5us; 6us; 9us; 11us; 13us; 14us; 16us; 17us; 19us; 21us; 23us; 24us; 25us; 27us; 29us; 31us; 32us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 3us; 3us; 1us; 3us; 3us; 3us; 3us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 4us; 4us; 5us; 5us; 6us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 65535us; 65535us; 16388us; 65535us; 65535us; 65535us; 16389us; 65535us; 65535us; 65535us; 65535us; 16392us; 16393us; |]
let _fsyacc_reductions ()  =    [| 
# 116 "SecurityInputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : I)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 125 "SecurityInputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : I)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 16 "SecurityInputParser.fsp"
                                                     _1 
                   )
# 16 "SecurityInputParser.fsp"
                 : I));
# 136 "SecurityInputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'lattice)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'classification)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 18 "SecurityInputParser.fsp"
                                                                Input(_1, _3) 
                   )
# 18 "SecurityInputParser.fsp"
                 : I));
# 148 "SecurityInputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'lattice)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lattice)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 21 "SecurityInputParser.fsp"
                                                                Lattice(_1, _3) 
                   )
# 21 "SecurityInputParser.fsp"
                 : 'lattice));
# 160 "SecurityInputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ordering)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 22 "SecurityInputParser.fsp"
                                                                SubLattice(_1) 
                   )
# 22 "SecurityInputParser.fsp"
                 : 'lattice));
# 171 "SecurityInputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'x)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ordering)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 25 "SecurityInputParser.fsp"
                                                                SubsetOrdering(_1, _3)
                   )
# 25 "SecurityInputParser.fsp"
                 : 'ordering));
# 183 "SecurityInputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'x)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'x)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 26 "SecurityInputParser.fsp"
                                                                FlowElement(_1, _3)
                   )
# 26 "SecurityInputParser.fsp"
                 : 'ordering));
# 195 "SecurityInputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'classification)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'classification)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 "SecurityInputParser.fsp"
                                                                 ClassSequence(_1, _3) 
                   )
# 29 "SecurityInputParser.fsp"
                 : 'classification));
# 207 "SecurityInputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'x)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'x)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "SecurityInputParser.fsp"
                                                                ClassAssign(_1, _3) 
                   )
# 30 "SecurityInputParser.fsp"
                 : 'classification));
# 219 "SecurityInputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "SecurityInputParser.fsp"
                                                                _1 
                   )
# 32 "SecurityInputParser.fsp"
                 : 'x));
|]
# 231 "SecurityInputParser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 10;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : I =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
