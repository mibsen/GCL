{
module GCLLexer

open System
open GCLParser
open FSharp.Text.Lexing
open System.Text

}

let char        = ['a'-'z' 'A'-'Z']
let digit       = ['0'-'9']
let num         = digit+ ( '.' digit+)?  ('E' ('+'|'-')? digit+ )?
let whitespace  = [' ' '\t']
let newline     = "\n\r" | '\n' | '\r'
let string        = char(char|digit)*
let bool = "true" | "false"

rule tokenize = parse
| whitespace    { tokenize lexbuf }
| newline       { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf; }
| num           { NUM(Double.Parse(LexBuffer<_>.LexemeString lexbuf)) }
| bool			{ BOOL(Boolean.Parse(LexBuffer<_>.LexemeString lexbuf)) }
| string        { let str = LexBuffer<_>.LexemeString lexbuf in STRING(str) }
| '*'           { TIMES }
| '/'           { DIV }
| '+'           { PLUS }
| '-'           { MINUS }
| '^'           { POW }
| '('           { LPAR }
| ')'           { RPAR }
| "["           { LBRAK }
| "]"           { RBRAK }
| "[]"          { COND }
| ":="			{ ASSIGN }
| "->"          { THEN }
| "<"           { LT  }
| ">"           { GT  }
| "="           { EQ  }
| ">="          { GE  } 
| "<="          { LE  }
| "&"           { AND }
| "&&"          { SAND }
| "|"           { OR  }
| "||"          { SOR }
| "!"           { NOT }
| "!="          { NOTEQ }
| "if "         { IF }
| " fi"         { FI }
| "do "         { DO }
| " od"         { OD}
| ";"           { SEMI }
| eof           { EOF }

| _ { raise (Exception (sprintf "SyntaxError: Unexpected char: '%s' Line: %d Column: %d" (LexBuffer<_>.LexemeString lexbuf) (lexbuf.StartPos.Line+1) lexbuf.StartPos.Column)) }


