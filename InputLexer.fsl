{
module InputLexer
}

let char          = ['a'-'z' 'A'-'Z']
let digit         = ['0'-'9']
let num           = digit+
let whitespace    = [' ' '\t']
let newline       = "\n\r" | '\n' | '\r'
let var           = char(char|digit)*

rule tokenize = parse
| whitespace    { tokenize lexbuf }
| newline       { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf; }
| num           { NUM(int (LexBuffer<_>.LexemeString lexbuf)) }
| var           { let str = LexBuffer<_>.LexemeString lexbuf in VAR(str) }
| "="			{ ASSIGN }
| "["           { LBRAK }
| "]"           { RBRAK }
| ","           { COMMA }
| eof           { EOF }
| _ { raise (Exception (sprintf "SyntaxError: Unexpected char: '%s' Line: %d Column: %d" (LexBuffer<_>.LexemeString lexbuf) (lexbuf.StartPos.Line+1) lexbuf.StartPos.Column)) }